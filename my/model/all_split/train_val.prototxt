name: "DrivingNet"

# Training input.
layer {
  name: "data"
  type: "DriveData"
  top: "data"
  top: "label"
  data_param {
    source: "/home/randon/data/all_hd/train_lmdb"
    backend: LMDB
    batch_size: 24
  }
  drive_data_param {
    unrecognize_factor: 0.4
    shrink_prob_factor: 1
    crop_num: 4
    random_crop_ratio: 0.1
    resize: 3
    scale: 1
  }
  transform_param {
    mean_file: "/home/randon/data/all_hd/train_mean.binaryproto"
  }
  include: { phase: TRAIN }
}

# Test input.
layer {
  name: "data"
  type: "DriveData"
  top: "data"
  top: "label"
  data_param {
    source: "/home/randon/data/all_hd/test_lmdb"
    backend: LMDB
    batch_size: 1
  }
  drive_data_param {
    unrecognize_factor: 0.4
    shrink_prob_factor: 1
    crop_num: 4
    random_crop_ratio: 0.1
    resize: 3
    scale: 1
  }
  transform_param {
    mean_file: "/home/randon/data/all_hd/train_mean.binaryproto"
  }
  include: { phase: TEST }
}

# Split label layer into pixel and bounding box label.
layer {
  name: "slice-label"
  type: "Slice"
  bottom: "label"
  top: "pixel-label"
  top: "bb-label"
  top: "size-label"
  top: "norm-label"
  slice_param {
    slice_dim: 1
    slice_point: 1
    slice_point: 5
    slice_point: 7
  }
}

# Concatenate the pixel labels 4 folds such that it can be used to mask
# all 4 dimensions of the bounding box predictions.
layer {
  name: "pixel-block"
  type: "Concat"
  bottom: "pixel-label"
  bottom: "pixel-label"
  bottom: "pixel-label"
  bottom: "pixel-label"
  top: "pixel-block"
  concat_param {
    concat_dim: 1
  }
}

layer {
  name: "size-block"
  type: "Concat"
  bottom: "size-label"
  bottom: "size-label"
  top: "size-block"
  concat_param {
    concat_dim: 1
  }
}

layer {
  name: "norm-block"
  type: "Concat"
  bottom: "norm-label"
  bottom: "norm-label"
  bottom: "norm-label"
  bottom: "norm-label"
  top: "norm-block"
  concat_param {
    concat_dim: 1
  }
}

layer {
  name: "bb-label-size-normalization"
  type: "Eltwise"
  bottom: "bb-label"
  bottom: "size-block"
  top: "bb-label-sn"
  eltwise_param {
    operation: PROD
  }
}

layer {
  name: "bb-label-num-pixel-normalization"
  type: "Eltwise"
  bottom: "bb-label-sn"
  bottom: "norm-block"
  top: "bb-label-sn-nn"
  eltwise_param {
    operation: PROD
  }
}

layer {
  name: "L0"
  type: "Convolution"
  bottom: "data"
  top: "L0"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "L0"
  top: "L0"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "L0"
  top: "norm1"
  lrn_param {
    k: 2
    local_size: 5
    alpha: 0.0005
    beta: 0.75
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "norm1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "L1"
  type: "Convolution"
  bottom: "pool1"
  top: "L1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "L1"
  top: "L1"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "L1"
  top: "norm2"
  lrn_param {
    k: 8
    local_size: 5
    alpha: 0.0005
    beta: 0.75
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "norm2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "L2"
  type: "Convolution"
  bottom: "pool2"
  top: "L2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "L2"
  top: "L2"
}
layer {
  name: "L3"
  type: "Convolution"
  bottom: "L2"
  top: "L3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "L3"
  top: "L3"
}
layer {
  name: "L4"
  type: "Convolution"
  bottom: "L3"
  top: "L4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "L4"
  top: "L4"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "L4"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

layer {
  name: "L5"
  type: "Convolution"
  bottom: "pool5"
  top: "L5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4096
    kernel_size: 6
    pad: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "L5"
  top: "L5"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "L5"
  top: "L5"
  dropout_param {
    dropout_ratio: 0.5
  }
}


layer {
  name: "L6a"
  type: "Convolution"
  bottom: "L5"
  top: "L6a"
  param {
    lr_mult: 5
    decay_mult: 0.1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4096
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7a"
  type: "ReLU"
  bottom: "L6a"
  top: "L6a"
}
layer {
  name: "drop7a"
  type: "Dropout"
  bottom: "L6a"
  top: "L6a"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "L6b"
  type: "Convolution"
  bottom: "L5"
  top: "L6b"
  param {
    lr_mult: 5
    decay_mult: 0.1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4096
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7b"
  type: "ReLU"
  bottom: "L6b"
  top: "L6b"
}
layer {
  name: "drop7b"
  type: "Dropout"
  bottom: "L6b"
  top: "L6b"
  dropout_param {
    dropout_ratio: 0.5
  }
}


layer {
  name: "bb-output"
  type: "Convolution"
  bottom: "L6a"
  top: "bb-output"
  param {
    lr_mult: 20
    decay_mult: 0.1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}

layer {
  name: "pixel-conv"
  type: "Convolution"
  bottom: "L6b"
  top: "pixel-conv"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}

layer {
  name: "pixel-tile"
  type: "Tiling"
  bottom: "pixel-conv"
  top: "pixel-conv-tiled"
  tiling_param {
    tile_dim: 8
  }
}

layer {
  name: "bb-tile"
  type: "Tiling"
  bottom: "bb-output"
  top: "bb-output-tiled"
  tiling_param {
    tile_dim: 8
  }
}

# Pixel level softmax loss.
layer {
  name: "pixel-loss"
  type: "SoftmaxWithLoss"
  bottom: "pixel-conv-tiled"
  bottom: "pixel-label"
  top: "pixel-loss"
}
# Pixel level accuracy
# layer {
#   name: "pixel-acc"
#   type: ACCURACY
#   bottom: "pixel-conv-tiled"
#   bottom: "pixel-label"
#   top: "pixel-acc"
#   include: { phase: TEST }
# }

# Masking the bounding boxes with input label.
layer {
  name: "bb-prob-mask"
  type: "Eltwise"
  bottom: "bb-output-tiled"
  bottom: "pixel-block"
  top: "bb-masked-output"
  eltwise_param {
    operation: PROD
  }
}

layer {
  name: "bb-size-normalization"
  type: "Eltwise"
  bottom: "bb-masked-output"
  bottom: "size-block"
  top: "bb-masked-output-sn"
  eltwise_param {
    operation: PROD
  }
}

layer {
  name: "bb-num-pixel-normalization"
  type: "Eltwise"
  bottom: "bb-masked-output-sn"
  bottom: "norm-block"
  top: "bb-masked-output-sn-nn"
  eltwise_param {
    operation: PROD
  }
}

layer {
  name: "bb-loss"
  type: "L1Loss"
  bottom: "bb-masked-output-sn-nn"
  bottom: "bb-label-sn-nn"
  top: "bb-loss"
  loss_weight: 3
}
